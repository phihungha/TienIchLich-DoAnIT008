<UserControl x:Class="TienIchLich.Views.CategoryPanelView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:vm="clr-namespace:TienIchLich.ViewModels"
             xmlns:converters="clr-namespace:TienIchLich.ViewModels.Converters"
             xmlns:selectors="clr-namespace:TienIchLich.ViewModels.DataTemplateSelectors"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <converters:CategoryDisplayColorOptionIdToString x:Key="CategoryDisplayColorOptionIdToStringConverter" />

        <!-- Appearance of a preset category display color option item in a ComboBox -->
        <DataTemplate DataType="{x:Type vm:CategoryDisplayColorOption}"
                      x:Key="StandardCategoryDisplayColorOptionTemplate">
            <StackPanel Orientation="Horizontal">
                <Ellipse Width="9" Height="9" VerticalAlignment="Center"
                          Margin="3" Fill="{Binding HexCode}" />
                <TextBlock VerticalAlignment="Center" Margin="3"
                           Text="{Binding Id, Converter={StaticResource CategoryDisplayColorOptionIdToStringConverter}}" />
            </StackPanel>
        </DataTemplate>

        <!-- Appearance of the custom category display color option item in a ComboBox -->
        <DataTemplate DataType="{x:Type vm:CategoryDisplayColorOption}"
                      x:Key="CustomCategoryDisplayColorOptionTemplate">
            <StackPanel Orientation="Horizontal">
                <Ellipse Width="9" Height="9" VerticalAlignment="Center" Margin="3"
                         Fill="{Binding DataContext.CustomDisplayColorOption, ElementName=DisplayColorComboBox}" />
                <StackPanel Orientation="Vertical">
                    <TextBlock Margin="3"><Run Text="Tùy chọn" /></TextBlock>
                    <xctk:ColorPicker x:Name="ColorPicker"
                                      SelectedColor="{Binding DataContext.CustomDisplayColorOption, ElementName=DisplayColorComboBox}"
                                      Width="100" Margin="3" HorizontalAlignment="Center" />
                </StackPanel>
            </StackPanel>
        </DataTemplate>

        <Style TargetType="{x:Type ToolTip}">
            <Setter Property="Foreground" Value="Red" />
            <Setter Property="IsOpen" Value="True" />
        </Style>

        <Style x:Key="DataGridTextBoxStyle" TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={RelativeSource Self}}" />
                </Trigger>
            </Style.Triggers>
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <selectors:CategoryDisplayColorOption x:Key="CategoryDisplayColorOptionTemplateSelector" />
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" FontSize="20" FontWeight="Bold" Foreground="White" Text="Loại lịch" />

            <Button Grid.Column="1" Command="{Binding AddCommand}"
                    HorizontalAlignment="Right"
                    Padding="7,4,7,4">
                <materialDesign:PackIcon Kind="Add" />
                <Button.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" />
                </Button.BorderBrush>
                <Button.Background>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.MenuHighlightColorKey}}" />
                </Button.Background>
            </Button>
        </Grid>

        <DataGrid x:Name="CalendarCategoryDataGrid" Grid.Row="1"
                  ItemsSource="{Binding CalendarCategoryVMs}"
                  AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False"
                  Margin="6,10,6,6"
                  HeadersVisibility="None" GridLinesVisibility="None"
                  Background="Transparent" BorderThickness="0" Foreground="White"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled">
            <DataGrid.CellStyle>
                <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                    <Setter Property="Background" Value="{x:Null}" />
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="Margin" Value="0" />
                    <Setter Property="Padding" Value="0" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{x:Null}" />
                            <Setter Property="BorderBrush" Value="{x:Null}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.CellStyle>

            <DataGrid.RowStyle>
                <Style BasedOn="{StaticResource {x:Type DataGridRow}}" TargetType="DataGridRow">
                    <Setter Property="Background" Value="{x:Null}" />
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{x:Null}" />
                            <Setter Property="BorderBrush" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{x:Null}" />
                            <Setter Property="BorderBrush" Value="{x:Null}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>
                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox Margin="6,0,0,0" IsChecked="{Binding IsDisplayed, UpdateSourceTrigger=PropertyChanged}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn Width="37">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Ellipse Width="10" Height="10"
                                     VerticalAlignment="Center" Margin="0,0,6,0"
                                     Fill="{Binding DisplayColor}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                    <DataGridTemplateColumn.CellEditingTemplate>
                        <DataTemplate>
                            <ComboBox x:Name="DisplayColorComboBox"
                                      Margin="0,0,6,0"
                                      ItemsSource="{Binding DisplayColorOptions}"
                                      SelectedItem="{Binding SelectedDisplayColorOption}"
                                      ItemTemplateSelector="{StaticResource CategoryDisplayColorOptionTemplateSelector}"
                                      FontSize="12" Height="25" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellEditingTemplate>
                </DataGridTemplateColumn>

                <DataGridTextColumn Binding="{Binding Name, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                    EditingElementStyle="{StaticResource DataGridTextBoxStyle}"
                                    Width="155" FontSize="15">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="FontWeight" Value="Bold" />
                            <Setter Property="Margin" Value="0,0,0,3" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Command="{Binding DeleteCommand}"
                                    Margin="0,0,0,0" Padding="5"
                                    HorizontalAlignment="Center">
                                <Button.Style>
                                    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
                                        <Setter Property="Opacity" Value="0" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsMouseOver,
                                                                   RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}, Mode=FindAncestor}}"
                                                         Value="True">
                                                <Setter Property="Opacity" Value="1" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                                <materialDesign:PackIcon Kind="Delete" />
                            </Button>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>